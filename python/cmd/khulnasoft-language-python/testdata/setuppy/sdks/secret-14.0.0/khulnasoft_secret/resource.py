# coding=utf-8
# *** WARNING: this file was generated by khulnasoft-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceArgs', 'Resource']

@khulnasoft.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 private: khulnasoft.Input[str],
                 private_data: khulnasoft.Input['DataArgs'],
                 public: khulnasoft.Input[str],
                 public_data: khulnasoft.Input['DataArgs']):
        """
        The set of arguments for constructing a Resource resource.
        """
        khulnasoft.set(__self__, "private", private)
        khulnasoft.set(__self__, "private_data", private_data)
        khulnasoft.set(__self__, "public", public)
        khulnasoft.set(__self__, "public_data", public_data)

    @property
    @khulnasoft.getter
    def private(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "private")

    @private.setter
    def private(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "private", value)

    @property
    @khulnasoft.getter(name="privateData")
    def private_data(self) -> khulnasoft.Input['DataArgs']:
        return khulnasoft.get(self, "private_data")

    @private_data.setter
    def private_data(self, value: khulnasoft.Input['DataArgs']):
        khulnasoft.set(self, "private_data", value)

    @property
    @khulnasoft.getter
    def public(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "public")

    @public.setter
    def public(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "public", value)

    @property
    @khulnasoft.getter(name="publicData")
    def public_data(self) -> khulnasoft.Input['DataArgs']:
        return khulnasoft.get(self, "public_data")

    @public_data.setter
    def public_data(self, value: khulnasoft.Input['DataArgs']):
        khulnasoft.set(self, "public_data", value)


class Resource(khulnasoft.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 private: Optional[khulnasoft.Input[str]] = None,
                 private_data: Optional[khulnasoft.Input[khulnasoft.InputType['DataArgs']]] = None,
                 public: Optional[khulnasoft.Input[str]] = None,
                 public_data: Optional[khulnasoft.Input[khulnasoft.InputType['DataArgs']]] = None,
                 __props__=None):
        """
        Create a Resource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Resource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 private: Optional[khulnasoft.Input[str]] = None,
                 private_data: Optional[khulnasoft.Input[khulnasoft.InputType['DataArgs']]] = None,
                 public: Optional[khulnasoft.Input[str]] = None,
                 public_data: Optional[khulnasoft.Input[khulnasoft.InputType['DataArgs']]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceArgs.__new__(ResourceArgs)

            if private is None and not opts.urn:
                raise TypeError("Missing required property 'private'")
            __props__.__dict__["private"] = None if private is None else khulnasoft.Output.secret(private)
            if private_data is None and not opts.urn:
                raise TypeError("Missing required property 'private_data'")
            __props__.__dict__["private_data"] = None if private_data is None else khulnasoft.Output.secret(private_data)
            if public is None and not opts.urn:
                raise TypeError("Missing required property 'public'")
            __props__.__dict__["public"] = public
            if public_data is None and not opts.urn:
                raise TypeError("Missing required property 'public_data'")
            __props__.__dict__["public_data"] = public_data
        secret_opts = khulnasoft.ResourceOptions(additional_secret_outputs=["private", "privateData"])
        opts = khulnasoft.ResourceOptions.merge(opts, secret_opts)
        super(Resource, __self__).__init__(
            'secret:index:Resource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: khulnasoft.Input[str],
            opts: Optional[khulnasoft.ResourceOptions] = None) -> 'Resource':
        """
        Get an existing Resource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param khulnasoft.Input[str] id: The unique provider ID of the resource to lookup.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        opts = khulnasoft.ResourceOptions.merge(opts, khulnasoft.ResourceOptions(id=id))

        __props__ = ResourceArgs.__new__(ResourceArgs)

        __props__.__dict__["private"] = None
        __props__.__dict__["private_data"] = None
        __props__.__dict__["public"] = None
        __props__.__dict__["public_data"] = None
        return Resource(resource_name, opts=opts, __props__=__props__)

    @property
    @khulnasoft.getter
    def private(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "private")

    @property
    @khulnasoft.getter(name="privateData")
    def private_data(self) -> khulnasoft.Output['outputs.Data']:
        return khulnasoft.get(self, "private_data")

    @property
    @khulnasoft.getter
    def public(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "public")

    @property
    @khulnasoft.getter(name="publicData")
    def public_data(self) -> khulnasoft.Output['outputs.Data']:
        return khulnasoft.get(self, "public_data")

