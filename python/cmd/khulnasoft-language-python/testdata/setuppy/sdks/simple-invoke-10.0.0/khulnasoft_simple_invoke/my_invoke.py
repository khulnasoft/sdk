# coding=utf-8
# *** WARNING: this file was generated by khulnasoft-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'MyInvokeResult',
    'AwaitableMyInvokeResult',
    'my_invoke',
    'my_invoke_output',
]

@khulnasoft.output_type
class MyInvokeResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        khulnasoft.set(__self__, "result", result)

    @property
    @khulnasoft.getter
    def result(self) -> str:
        return khulnasoft.get(self, "result")


class AwaitableMyInvokeResult(MyInvokeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return MyInvokeResult(
            result=self.result)


def my_invoke(value: Optional[str] = None,
              opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableMyInvokeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['value'] = value
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('simple-invoke:index:myInvoke', __args__, opts=opts, typ=MyInvokeResult).value

    return AwaitableMyInvokeResult(
        result=khulnasoft.get(__ret__, 'result'))
def my_invoke_output(value: Optional[khulnasoft.Input[str]] = None,
                     opts: Optional[Union[khulnasoft.InvokeOptions, khulnasoft.InvokeOutputOptions]] = None) -> khulnasoft.Output[MyInvokeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['value'] = value
    opts = khulnasoft.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('simple-invoke:index:myInvoke', __args__, opts=opts, typ=MyInvokeResult)
    return __ret__.apply(lambda __response__: MyInvokeResult(
        result=khulnasoft.get(__response__, 'result')))
