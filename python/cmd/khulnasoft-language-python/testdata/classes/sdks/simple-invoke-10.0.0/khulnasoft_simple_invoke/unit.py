# coding=utf-8
# *** WARNING: this file was generated by khulnasoft-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'UnitResult',
    'AwaitableUnitResult',
    'unit',
    'unit_output',
]

@khulnasoft.output_type
class UnitResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        khulnasoft.set(__self__, "result", result)

    @property
    @khulnasoft.getter
    def result(self) -> str:
        return khulnasoft.get(self, "result")


class AwaitableUnitResult(UnitResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return UnitResult(
            result=self.result)


def unit(opts: Optional[khulnasoft.InvokeOptions] = None) -> AwaitableUnitResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = khulnasoft.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke('simple-invoke:index:unit', __args__, opts=opts, typ=UnitResult).value

    return AwaitableUnitResult(
        result=khulnasoft.get(__ret__, 'result'))
def unit_output(opts: Optional[Union[khulnasoft.InvokeOptions, khulnasoft.InvokeOutputOptions]] = None) -> khulnasoft.Output[UnitResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = khulnasoft.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = khulnasoft.runtime.invoke_output('simple-invoke:index:unit', __args__, opts=opts, typ=UnitResult)
    return __ret__.apply(lambda __response__: UnitResult(
        result=khulnasoft.get(__response__, 'result')))
