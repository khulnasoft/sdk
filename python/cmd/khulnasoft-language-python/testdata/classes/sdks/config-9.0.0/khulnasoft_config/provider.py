# coding=utf-8
# *** WARNING: this file was generated by khulnasoft-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import khulnasoft
import khulnasoft.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@khulnasoft.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 name: khulnasoft.Input[str],
                 plugin_download_url: Optional[khulnasoft.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        """
        khulnasoft.set(__self__, "name", name)
        if plugin_download_url is not None:
            khulnasoft.set(__self__, "plugin_download_url", plugin_download_url)

    @property
    @khulnasoft.getter
    def name(self) -> khulnasoft.Input[str]:
        return khulnasoft.get(self, "name")

    @name.setter
    def name(self, value: khulnasoft.Input[str]):
        khulnasoft.set(self, "name", value)

    @property
    @khulnasoft.getter(name="pluginDownloadURL")
    def plugin_download_url(self) -> Optional[khulnasoft.Input[str]]:
        return khulnasoft.get(self, "plugin_download_url")

    @plugin_download_url.setter
    def plugin_download_url(self, value: Optional[khulnasoft.Input[str]]):
        khulnasoft.set(self, "plugin_download_url", value)


class Provider(khulnasoft.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 name: Optional[khulnasoft.Input[str]] = None,
                 plugin_download_url: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        """
        Create a Config resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[khulnasoft.ResourceOptions] = None):
        """
        Create a Config resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param khulnasoft.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, khulnasoft.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[khulnasoft.ResourceOptions] = None,
                 name: Optional[khulnasoft.Input[str]] = None,
                 plugin_download_url: Optional[khulnasoft.Input[str]] = None,
                 __props__=None):
        opts = khulnasoft.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, khulnasoft.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["plugin_download_url"] = plugin_download_url
            __props__.__dict__["version"] = None
        super(Provider, __self__).__init__(
            'config',
            resource_name,
            __props__,
            opts)

    @property
    @khulnasoft.getter
    def name(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "name")

    @property
    @khulnasoft.getter(name="pluginDownloadURL")
    def plugin_download_url(self) -> khulnasoft.Output[Optional[str]]:
        return khulnasoft.get(self, "plugin_download_url")

    @property
    @khulnasoft.getter
    def version(self) -> khulnasoft.Output[str]:
        return khulnasoft.get(self, "version")

