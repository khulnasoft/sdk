"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2016-2022, KhulnaSoft, Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing
import khulnasoft.callback_pb2
import khulnasoft.provider_pb2
import khulnasoft.resource_pb2

class ResourceMonitorStub:
    """ResourceMonitor is the interface a source uses to talk back to the planning monitor orchestrating the execution."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    SupportsFeature: grpc.UnaryUnaryMultiCallable[
        khulnasoft.resource_pb2.SupportsFeatureRequest,
        khulnasoft.resource_pb2.SupportsFeatureResponse,
    ]
    Invoke: grpc.UnaryUnaryMultiCallable[
        khulnasoft.resource_pb2.ResourceInvokeRequest,
        khulnasoft.provider_pb2.InvokeResponse,
    ]
    StreamInvoke: grpc.UnaryStreamMultiCallable[
        khulnasoft.resource_pb2.ResourceInvokeRequest,
        khulnasoft.provider_pb2.InvokeResponse,
    ]
    Call: grpc.UnaryUnaryMultiCallable[
        khulnasoft.resource_pb2.ResourceCallRequest,
        khulnasoft.provider_pb2.CallResponse,
    ]
    ReadResource: grpc.UnaryUnaryMultiCallable[
        khulnasoft.resource_pb2.ReadResourceRequest,
        khulnasoft.resource_pb2.ReadResourceResponse,
    ]
    RegisterResource: grpc.UnaryUnaryMultiCallable[
        khulnasoft.resource_pb2.RegisterResourceRequest,
        khulnasoft.resource_pb2.RegisterResourceResponse,
    ]
    RegisterResourceOutputs: grpc.UnaryUnaryMultiCallable[
        khulnasoft.resource_pb2.RegisterResourceOutputsRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    RegisterStackTransform: grpc.UnaryUnaryMultiCallable[
        khulnasoft.callback_pb2.Callback,
        google.protobuf.empty_pb2.Empty,
    ]
    """Register a resource transform for the stack"""
    RegisterStackInvokeTransform: grpc.UnaryUnaryMultiCallable[
        khulnasoft.callback_pb2.Callback,
        google.protobuf.empty_pb2.Empty,
    ]
    """Register an invoke transform for the stack"""
    RegisterPackage: grpc.UnaryUnaryMultiCallable[
        khulnasoft.resource_pb2.RegisterPackageRequest,
        khulnasoft.resource_pb2.RegisterPackageResponse,
    ]

class ResourceMonitorServicer(metaclass=abc.ABCMeta):
    """ResourceMonitor is the interface a source uses to talk back to the planning monitor orchestrating the execution."""

    
    def SupportsFeature(
        self,
        request: khulnasoft.resource_pb2.SupportsFeatureRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.resource_pb2.SupportsFeatureResponse: ...
    
    def Invoke(
        self,
        request: khulnasoft.resource_pb2.ResourceInvokeRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.provider_pb2.InvokeResponse: ...
    
    def StreamInvoke(
        self,
        request: khulnasoft.resource_pb2.ResourceInvokeRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[khulnasoft.provider_pb2.InvokeResponse]: ...
    
    def Call(
        self,
        request: khulnasoft.resource_pb2.ResourceCallRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.provider_pb2.CallResponse: ...
    
    def ReadResource(
        self,
        request: khulnasoft.resource_pb2.ReadResourceRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.resource_pb2.ReadResourceResponse: ...
    
    def RegisterResource(
        self,
        request: khulnasoft.resource_pb2.RegisterResourceRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.resource_pb2.RegisterResourceResponse: ...
    
    def RegisterResourceOutputs(
        self,
        request: khulnasoft.resource_pb2.RegisterResourceOutputsRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...
    
    def RegisterStackTransform(
        self,
        request: khulnasoft.callback_pb2.Callback,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Register a resource transform for the stack"""
    
    def RegisterStackInvokeTransform(
        self,
        request: khulnasoft.callback_pb2.Callback,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Register an invoke transform for the stack"""
    
    def RegisterPackage(
        self,
        request: khulnasoft.resource_pb2.RegisterPackageRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.resource_pb2.RegisterPackageResponse: ...

def add_ResourceMonitorServicer_to_server(servicer: ResourceMonitorServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
