"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2016-2023, KhulnaSoft, Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import abc
import grpc
import grpc.aio
import typing
import khulnasoft.converter_pb2

class ConverterStub:
    """Converter is a service for converting between other ecosystems and Khulnasoft.
    This is currently unstable and experimental.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    ConvertState: grpc.UnaryUnaryMultiCallable[
        khulnasoft.converter_pb2.ConvertStateRequest,
        khulnasoft.converter_pb2.ConvertStateResponse,
    ]
    """ConvertState converts state from the target ecosystem into a form that can be imported into Khulnasoft."""
    ConvertProgram: grpc.UnaryUnaryMultiCallable[
        khulnasoft.converter_pb2.ConvertProgramRequest,
        khulnasoft.converter_pb2.ConvertProgramResponse,
    ]
    """ConvertProgram converts a program from the target ecosystem into a form that can be used with Khulnasoft."""

class ConverterServicer(metaclass=abc.ABCMeta):
    """Converter is a service for converting between other ecosystems and Khulnasoft.
    This is currently unstable and experimental.
    """

    
    def ConvertState(
        self,
        request: khulnasoft.converter_pb2.ConvertStateRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.converter_pb2.ConvertStateResponse:
        """ConvertState converts state from the target ecosystem into a form that can be imported into Khulnasoft."""
    
    def ConvertProgram(
        self,
        request: khulnasoft.converter_pb2.ConvertProgramRequest,
        context: grpc.ServicerContext,
    ) -> khulnasoft.converter_pb2.ConvertProgramResponse:
        """ConvertProgram converts a program from the target ecosystem into a form that can be used with Khulnasoft."""

def add_ConverterServicer_to_server(servicer: ConverterServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
