// source: khulnasoft/testing/language.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var proto = { khulnasoftrpc: { codegen: { }, testing: { } } }, global = proto;

goog.exportSymbol('proto.khulnasoftrpc.testing.GetLanguageTestsRequest', null, global);
goog.exportSymbol('proto.khulnasoftrpc.testing.GetLanguageTestsResponse', null, global);
goog.exportSymbol('proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest', null, global);
goog.exportSymbol('proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement', null, global);
goog.exportSymbol('proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse', null, global);
goog.exportSymbol('proto.khulnasoftrpc.testing.RunLanguageTestRequest', null, global);
goog.exportSymbol('proto.khulnasoftrpc.testing.RunLanguageTestResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.khulnasoftrpc.testing.GetLanguageTestsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.khulnasoftrpc.testing.GetLanguageTestsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.khulnasoftrpc.testing.GetLanguageTestsRequest.displayName = 'proto.khulnasoftrpc.testing.GetLanguageTestsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.khulnasoftrpc.testing.GetLanguageTestsResponse.repeatedFields_, null);
};
goog.inherits(proto.khulnasoftrpc.testing.GetLanguageTestsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.khulnasoftrpc.testing.GetLanguageTestsResponse.displayName = 'proto.khulnasoftrpc.testing.GetLanguageTestsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.repeatedFields_, null);
};
goog.inherits(proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.displayName = 'proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.displayName = 'proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.displayName = 'proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.khulnasoftrpc.testing.RunLanguageTestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.khulnasoftrpc.testing.RunLanguageTestRequest.displayName = 'proto.khulnasoftrpc.testing.RunLanguageTestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.khulnasoftrpc.testing.RunLanguageTestResponse.repeatedFields_, null);
};
goog.inherits(proto.khulnasoftrpc.testing.RunLanguageTestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.khulnasoftrpc.testing.RunLanguageTestResponse.displayName = 'proto.khulnasoftrpc.testing.RunLanguageTestResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.khulnasoftrpc.testing.GetLanguageTestsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.khulnasoftrpc.testing.GetLanguageTestsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.GetLanguageTestsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.khulnasoftrpc.testing.GetLanguageTestsRequest}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.khulnasoftrpc.testing.GetLanguageTestsRequest;
  return proto.khulnasoftrpc.testing.GetLanguageTestsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.khulnasoftrpc.testing.GetLanguageTestsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.khulnasoftrpc.testing.GetLanguageTestsRequest}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.khulnasoftrpc.testing.GetLanguageTestsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.khulnasoftrpc.testing.GetLanguageTestsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.GetLanguageTestsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.khulnasoftrpc.testing.GetLanguageTestsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    testsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.khulnasoftrpc.testing.GetLanguageTestsResponse;
  return proto.khulnasoftrpc.testing.GetLanguageTestsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.khulnasoftrpc.testing.GetLanguageTestsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string tests = 1;
 * @return {!Array<string>}
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.prototype.getTestsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse} returns this
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.prototype.setTestsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse} returns this
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.prototype.addTests = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.khulnasoftrpc.testing.GetLanguageTestsResponse} returns this
 */
proto.khulnasoftrpc.testing.GetLanguageTestsResponse.prototype.clearTestsList = function() {
  return this.setTestsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    languagePluginName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languagePluginTarget: jspb.Message.getFieldWithDefault(msg, 2, ""),
    snapshotDirectory: jspb.Message.getFieldWithDefault(msg, 3, ""),
    temporaryDirectory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    coreSdkDirectory: jspb.Message.getFieldWithDefault(msg, 5, ""),
    coreSdkVersion: jspb.Message.getFieldWithDefault(msg, 6, ""),
    snapshotEditsList: jspb.Message.toObjectList(msg.getSnapshotEditsList(),
    proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.toObject, includeInstance),
    languageInfo: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest;
  return proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagePluginName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguagePluginTarget(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnapshotDirectory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemporaryDirectory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoreSdkDirectory(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoreSdkVersion(value);
      break;
    case 7:
      var value = new proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement;
      reader.readMessage(value,proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.deserializeBinaryFromReader);
      msg.addSnapshotEdits(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguagePluginName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguagePluginTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSnapshotDirectory();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTemporaryDirectory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCoreSdkDirectory();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCoreSdkVersion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSnapshotEditsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.serializeBinaryToWriter
    );
  }
  f = message.getLanguageInfo();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.toObject = function(opt_includeInstance) {
  return proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pattern: jspb.Message.getFieldWithDefault(msg, 2, ""),
    replacement: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement;
  return proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplacement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReplacement();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pattern = 2;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.setPattern = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string replacement = 3;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.getReplacement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement.prototype.setReplacement = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string language_plugin_name = 1;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getLanguagePluginName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setLanguagePluginName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string language_plugin_target = 2;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getLanguagePluginTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setLanguagePluginTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string snapshot_directory = 3;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getSnapshotDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setSnapshotDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string temporary_directory = 4;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getTemporaryDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setTemporaryDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string core_sdk_directory = 5;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getCoreSdkDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setCoreSdkDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string core_sdk_version = 6;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getCoreSdkVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setCoreSdkVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated Replacement snapshot_edits = 7;
 * @return {!Array<!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement>}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getSnapshotEditsList = function() {
  return /** @type{!Array<!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement, 7));
};


/**
 * @param {!Array<!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement>} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
*/
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setSnapshotEditsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.addSnapshotEdits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.Replacement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.clearSnapshotEditsList = function() {
  return this.setSnapshotEditsList([]);
};


/**
 * optional string language_info = 8;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.getLanguageInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsRequest.prototype.setLanguageInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse;
  return proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse} returns this
 */
proto.khulnasoftrpc.testing.PrepareLanguageTestsResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.khulnasoftrpc.testing.RunLanguageTestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.khulnasoftrpc.testing.RunLanguageTestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    test: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestRequest}
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.khulnasoftrpc.testing.RunLanguageTestRequest;
  return proto.khulnasoftrpc.testing.RunLanguageTestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.khulnasoftrpc.testing.RunLanguageTestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestRequest}
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.khulnasoftrpc.testing.RunLanguageTestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.khulnasoftrpc.testing.RunLanguageTestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestRequest} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string test = 2;
 * @return {string}
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.prototype.getTest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestRequest} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestRequest.prototype.setTest = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.khulnasoftrpc.testing.RunLanguageTestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    messagesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    stdout: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stderr: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.khulnasoftrpc.testing.RunLanguageTestResponse;
  return proto.khulnasoftrpc.testing.RunLanguageTestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addMessages(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStdout(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStderr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.khulnasoftrpc.testing.RunLanguageTestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getStdout();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStderr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string messages = 2;
 * @return {!Array<string>}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.getMessagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.setMessagesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.addMessages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional string stdout = 3;
 * @return {string}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.getStdout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.setStdout = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string stderr = 4;
 * @return {string}
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.getStderr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.khulnasoftrpc.testing.RunLanguageTestResponse} returns this
 */
proto.khulnasoftrpc.testing.RunLanguageTestResponse.prototype.setStderr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.khulnasoftrpc.testing);
