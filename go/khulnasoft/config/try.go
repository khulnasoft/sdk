// Copyright 2016-2022, KhulnaSoft, Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "generate.go"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cast"

	"github.com/khulnasoft/sdk/go/khulnasoft"
)

var ErrMissingVar = missingVariable{}

type missingVariable struct {
	key string
}

func (m missingVariable) Error() string {
	if m.key == "" {
		return "missing required configuration variable"
	}
	return fmt.Sprintf("missing required configuration variable '%s'; run `khulnasoft config` to set", m.key)
}

func (m missingVariable) Is(target error) bool {
	_, ok := target.(missingVariable)
	return ok
}

func try(ctx *khulnasoft.Context, key, use, insteadOf string) (string, error) {
	v, ok := get(ctx, key, use, insteadOf)
	if !ok {
		return "", missingVariable{key}
	}
	return v, nil
}

// Try loads a configuration value by its key, returning a non-nil error if it doesn't exist.
func Try(ctx *khulnasoft.Context, key string) (string, error) {
	return try(ctx, key, "TrySecret", "Try")
}

func tryObject(ctx *khulnasoft.Context, key string, output interface{}, use, insteadOf string) error {
	v, err := try(ctx, key, use, insteadOf)
	if err != nil {
		return err
	}
	return json.Unmarshal([]byte(v), output)
}

// TryObject loads an optional configuration value by its key into the output variable,
// or returns an error if unable to do so.
func TryObject(ctx *khulnasoft.Context, key string, output interface{}) error {
	return tryObject(ctx, key, output, "TrySecretObject", "TryObject")
}

func tryBool(ctx *khulnasoft.Context, key, use, insteadOf string) (bool, error) {
	v, err := try(ctx, key, use, insteadOf)
	if err != nil {
		return false, err
	}
	return cast.ToBoolE(v)
}

// TryBool loads an optional configuration value by its key, as a bool,
// or returns an error if it doesn't exist or can't be parsed.
func TryBool(ctx *khulnasoft.Context, key string) (bool, error) {
	return tryBool(ctx, key, "TrySecretBool", "TryBool")
}

func tryFloat64(ctx *khulnasoft.Context, key, use, insteadOf string) (float64, error) {
	v, err := try(ctx, key, use, insteadOf)
	if err != nil {
		return 0, err
	}
	return cast.ToFloat64E(v)
}

// TryFloat64 loads an optional configuration value by its key, as a float64,
// or returns an error if it doesn't exist or can't be parsed.
func TryFloat64(ctx *khulnasoft.Context, key string) (float64, error) {
	return tryFloat64(ctx, key, "TrySecretFloat64", "TryFloat64")
}

func tryInt(ctx *khulnasoft.Context, key, use, insteadOf string) (int, error) {
	v, err := try(ctx, key, use, insteadOf)
	if err != nil {
		return 0, err
	}
	return cast.ToIntE(v)
}

// TryInt loads an optional configuration value by its key, as a int,
// or returns an error if it doesn't exist or can't be parsed.
func TryInt(ctx *khulnasoft.Context, key string) (int, error) {
	return tryInt(ctx, key, "TrySecretInt", "TryInt")
}

// TrySecret loads a configuration value by its key, returning a non-nil error if it doesn't exist.
func TrySecret(ctx *khulnasoft.Context, key string) (khulnasoft.StringOutput, error) {
	v, err := try(ctx, key, "", "")
	if err != nil {
		var empty khulnasoft.StringOutput
		return empty, err
	}
	return khulnasoft.ToSecret(khulnasoft.String(v)).(khulnasoft.StringOutput), nil
}

// TrySecretObject loads a configuration value by its key into the output variable,
// or returns an error if unable to do so.
func TrySecretObject(ctx *khulnasoft.Context, key string, output interface{}) (khulnasoft.Output, error) {
	err := tryObject(ctx, key, output, "", "")
	if err != nil {
		return nil, err
	}

	return khulnasoft.ToSecret(output), nil
}

// TrySecretBool loads an optional configuration value by its key, as a bool,
// or returns an error if it doesn't exist.
func TrySecretBool(ctx *khulnasoft.Context, key string) (khulnasoft.BoolOutput, error) {
	v, err := tryBool(ctx, key, "", "")
	if err != nil {
		var empty khulnasoft.BoolOutput
		return empty, err
	}
	return khulnasoft.ToSecret(khulnasoft.Bool(v)).(khulnasoft.BoolOutput), nil
}

// TrySecretFloat64 loads an optional configuration value by its key, as a float64,
// or returns an error if it doesn't exist.
func TrySecretFloat64(ctx *khulnasoft.Context, key string) (khulnasoft.Float64Output, error) {
	v, err := tryFloat64(ctx, key, "", "")
	if err != nil {
		var empty khulnasoft.Float64Output
		return empty, err
	}
	return khulnasoft.ToSecret(khulnasoft.Float64(v)).(khulnasoft.Float64Output), nil
}

// TrySecretInt loads an optional configuration value by its key, as a int,
// or returns an error if it doesn't exist.
func TrySecretInt(ctx *khulnasoft.Context, key string) (khulnasoft.IntOutput, error) {
	v, err := tryInt(ctx, key, "", "")
	if err != nil {
		var empty khulnasoft.IntOutput
		return empty, err
	}
	return khulnasoft.ToSecret(khulnasoft.Int(v)).(khulnasoft.IntOutput), nil
}
