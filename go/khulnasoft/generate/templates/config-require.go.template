// Copyright 2016-2022, KhulnaSoft, Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "generate.go"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"

	"github.com/spf13/cast"

	"github.com/khulnasoft/sdk/go/khulnasoft"
)

func failf(format string, a ...interface{}) {
	panic(fmt.Errorf(format, a...))
}

func require(ctx *khulnasoft.Context, key string, secret bool, use, insteadOf string) string {
	v, ok := get(ctx, key, use, insteadOf)

	secretText := " "
	if secret {
		secretText = " --secret "
	}

	if !ok {
		failf("Missing required configuration variable '%s'\n"+
			"\tplease set a value using the command `khulnasoft config set%s%s <value>`",
			key, secretText, key)
	}
	return v
}

// Require loads a configuration value by its key, or panics if it doesn't exist.
func Require(ctx *khulnasoft.Context, key string) string {
	return require(ctx, key, false, "RequireSecret", "Require")
}

func requireObject(ctx *khulnasoft.Context, key string, secret bool, output interface{}, use, insteadOf string) {
	v := require(ctx, key, secret, use, insteadOf)
	if err := json.Unmarshal([]byte(v), output); err != nil {
		failf("unable to unmarshall required configuration variable '%s'; %s", key, err)
	}
}

// RequireObject loads an optional configuration value by its key into the output variable,
// or panics if unable to do so.
func RequireObject(ctx *khulnasoft.Context, key string, output interface{}) {
	requireObject(ctx, key, false, output, "RequireSecretObject", "RequireObject")
}

{{range .Builtins}}
{{if .GenerateConfig}}
func require{{.Name}}(ctx *khulnasoft.Context, key string, secret bool, use, insteadOf string) {{.Type}} {
	v := require(ctx, key, secret, use, insteadOf)
	o, err := cast.To{{.Name}}E(v)
	if err != nil {
		failf("unable to parse required configuration variable '%s'; %s", key, err)
	}
	return o
}

// Require{{.Name}} loads an optional configuration value by its key, as a {{.Type}}, or panics if it doesn't exist.
func Require{{.Name}}(ctx *khulnasoft.Context, key string) {{.Type}} {
	return require{{.Name}}(ctx, key, false, "RequireSecret{{.Name}}", "Require{{.Name}}")
}

{{end}}
{{end}}
// RequireSecret loads a configuration value by its key returning it wrapped in a secret Output,
// or panics if it doesn't exist.
func RequireSecret(ctx *khulnasoft.Context, key string) khulnasoft.StringOutput {
	return khulnasoft.ToSecret(require(ctx, key, true, "", "")).(khulnasoft.StringOutput)
}

// RequireSecretObject loads an optional configuration value by its key into the output variable,
// returning it wrapped in a secret Output, or panics if unable to do so.
func RequireSecretObject(ctx *khulnasoft.Context, key string, output interface{}) khulnasoft.Output {
	requireObject(ctx, key, true, output, "", "")
	return khulnasoft.ToSecret(output)
}

{{range .Builtins}}
{{if .GenerateConfig}}
// RequireSecret{{.Name}} loads an optional configuration value by its key,
// as a {{.Type}} wrapped in a secret Output, or panics if it doesn't exist.
func RequireSecret{{.Name}}(ctx *khulnasoft.Context, key string) khulnasoft.{{.Name}}Output {
	return khulnasoft.ToSecret(require{{.Name}}(ctx, key, true, "", "")).(khulnasoft.{{.Name}}Output)
}
{{end}}
{{end}}
