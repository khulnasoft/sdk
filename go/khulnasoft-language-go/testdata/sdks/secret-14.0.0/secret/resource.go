// Code generated by khulnasoft-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package secret

import (
	"context"
	"reflect"

	"errors"
	"example.com/khulnasoft-secret/sdk/go/v14/secret/internal"
	"github.com/khulnasoft/sdk/go/khulnasoft"
)

type Resource struct {
	khulnasoft.CustomResourceState

	Private     khulnasoft.StringOutput `khulnasoft:"private"`
	PrivateData DataOutput          `khulnasoft:"privateData"`
	Public      khulnasoft.StringOutput `khulnasoft:"public"`
	PublicData  DataOutput          `khulnasoft:"publicData"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *khulnasoft.Context,
	name string, args *ResourceArgs, opts ...khulnasoft.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Private == nil {
		return nil, errors.New("invalid value for required argument 'Private'")
	}
	if args.PrivateData == nil {
		return nil, errors.New("invalid value for required argument 'PrivateData'")
	}
	if args.Public == nil {
		return nil, errors.New("invalid value for required argument 'Public'")
	}
	if args.PublicData == nil {
		return nil, errors.New("invalid value for required argument 'PublicData'")
	}
	if args.Private != nil {
		args.Private = khulnasoft.ToSecret(args.Private).(khulnasoft.StringInput)
	}
	if args.PrivateData != nil {
		args.PrivateData = khulnasoft.ToSecret(args.PrivateData).(DataInput)
	}
	secrets := khulnasoft.AdditionalSecretOutputs([]string{
		"private",
		"privateData",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("secret:index:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *ResourceState, opts ...khulnasoft.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("secret:index:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
}

type ResourceState struct {
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	Private     string `khulnasoft:"private"`
	PrivateData Data   `khulnasoft:"privateData"`
	Public      string `khulnasoft:"public"`
	PublicData  Data   `khulnasoft:"publicData"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	Private     khulnasoft.StringInput
	PrivateData DataInput
	Public      khulnasoft.StringInput
	PublicData  DataInput
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceInput interface {
	khulnasoft.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(ctx context.Context) ResourceOutput
}

func (*Resource) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *Resource) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i *Resource) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ResourceOutput)
}

type ResourceOutput struct{ *khulnasoft.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) Private() khulnasoft.StringOutput {
	return o.ApplyT(func(v *Resource) khulnasoft.StringOutput { return v.Private }).(khulnasoft.StringOutput)
}

func (o ResourceOutput) PrivateData() DataOutput {
	return o.ApplyT(func(v *Resource) DataOutput { return v.PrivateData }).(DataOutput)
}

func (o ResourceOutput) Public() khulnasoft.StringOutput {
	return o.ApplyT(func(v *Resource) khulnasoft.StringOutput { return v.Public }).(khulnasoft.StringOutput)
}

func (o ResourceOutput) PublicData() DataOutput {
	return o.ApplyT(func(v *Resource) DataOutput { return v.PublicData }).(DataOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), &Resource{})
	khulnasoft.RegisterOutputType(ResourceOutput{})
}
