// Code generated by khulnasoft-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package simpleinvoke

import (
	"context"
	"reflect"

	"errors"
	"example.com/khulnasoft-simple-invoke/sdk/go/v10/simpleinvoke/internal"
	"github.com/khulnasoft/sdk/go/khulnasoft"
)

type StringResource struct {
	khulnasoft.CustomResourceState

	Text khulnasoft.StringOutput `khulnasoft:"text"`
}

// NewStringResource registers a new resource with the given unique name, arguments, and options.
func NewStringResource(ctx *khulnasoft.Context,
	name string, args *StringResourceArgs, opts ...khulnasoft.ResourceOption) (*StringResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Text == nil {
		return nil, errors.New("invalid value for required argument 'Text'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StringResource
	err := ctx.RegisterResource("simple-invoke:index:StringResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStringResource gets an existing StringResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStringResource(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *StringResourceState, opts ...khulnasoft.ResourceOption) (*StringResource, error) {
	var resource StringResource
	err := ctx.ReadResource("simple-invoke:index:StringResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StringResource resources.
type stringResourceState struct {
}

type StringResourceState struct {
}

func (StringResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*stringResourceState)(nil)).Elem()
}

type stringResourceArgs struct {
	Text string `khulnasoft:"text"`
}

// The set of arguments for constructing a StringResource resource.
type StringResourceArgs struct {
	Text khulnasoft.StringInput
}

func (StringResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stringResourceArgs)(nil)).Elem()
}

type StringResourceInput interface {
	khulnasoft.Input

	ToStringResourceOutput() StringResourceOutput
	ToStringResourceOutputWithContext(ctx context.Context) StringResourceOutput
}

func (*StringResource) ElementType() reflect.Type {
	return reflect.TypeOf((**StringResource)(nil)).Elem()
}

func (i *StringResource) ToStringResourceOutput() StringResourceOutput {
	return i.ToStringResourceOutputWithContext(context.Background())
}

func (i *StringResource) ToStringResourceOutputWithContext(ctx context.Context) StringResourceOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(StringResourceOutput)
}

type StringResourceOutput struct{ *khulnasoft.OutputState }

func (StringResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StringResource)(nil)).Elem()
}

func (o StringResourceOutput) ToStringResourceOutput() StringResourceOutput {
	return o
}

func (o StringResourceOutput) ToStringResourceOutputWithContext(ctx context.Context) StringResourceOutput {
	return o
}

func (o StringResourceOutput) Text() khulnasoft.StringOutput {
	return o.ApplyT(func(v *StringResource) khulnasoft.StringOutput { return v.Text }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*StringResourceInput)(nil)).Elem(), &StringResource{})
	khulnasoft.RegisterOutputType(StringResourceOutput{})
}
