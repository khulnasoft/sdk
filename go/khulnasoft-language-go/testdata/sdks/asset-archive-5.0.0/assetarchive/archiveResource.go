// Code generated by khulnasoft-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package assetarchive

import (
	"context"
	"reflect"

	"errors"
	"example.com/khulnasoft-asset-archive/sdk/go/v5/assetarchive/internal"
	"github.com/khulnasoft/sdk/go/khulnasoft"
)

type ArchiveResource struct {
	khulnasoft.CustomResourceState

	Value khulnasoft.ArchiveOutput `khulnasoft:"value"`
}

// NewArchiveResource registers a new resource with the given unique name, arguments, and options.
func NewArchiveResource(ctx *khulnasoft.Context,
	name string, args *ArchiveResourceArgs, opts ...khulnasoft.ResourceOption) (*ArchiveResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ArchiveResource
	err := ctx.RegisterResource("asset-archive:index:ArchiveResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArchiveResource gets an existing ArchiveResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArchiveResource(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *ArchiveResourceState, opts ...khulnasoft.ResourceOption) (*ArchiveResource, error) {
	var resource ArchiveResource
	err := ctx.ReadResource("asset-archive:index:ArchiveResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArchiveResource resources.
type archiveResourceState struct {
}

type ArchiveResourceState struct {
}

func (ArchiveResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveResourceState)(nil)).Elem()
}

type archiveResourceArgs struct {
	Value khulnasoft.Archive `khulnasoft:"value"`
}

// The set of arguments for constructing a ArchiveResource resource.
type ArchiveResourceArgs struct {
	Value khulnasoft.ArchiveInput
}

func (ArchiveResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveResourceArgs)(nil)).Elem()
}

type ArchiveResourceInput interface {
	khulnasoft.Input

	ToArchiveResourceOutput() ArchiveResourceOutput
	ToArchiveResourceOutputWithContext(ctx context.Context) ArchiveResourceOutput
}

func (*ArchiveResource) ElementType() reflect.Type {
	return reflect.TypeOf((**ArchiveResource)(nil)).Elem()
}

func (i *ArchiveResource) ToArchiveResourceOutput() ArchiveResourceOutput {
	return i.ToArchiveResourceOutputWithContext(context.Background())
}

func (i *ArchiveResource) ToArchiveResourceOutputWithContext(ctx context.Context) ArchiveResourceOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(ArchiveResourceOutput)
}

type ArchiveResourceOutput struct{ *khulnasoft.OutputState }

func (ArchiveResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArchiveResource)(nil)).Elem()
}

func (o ArchiveResourceOutput) ToArchiveResourceOutput() ArchiveResourceOutput {
	return o
}

func (o ArchiveResourceOutput) ToArchiveResourceOutputWithContext(ctx context.Context) ArchiveResourceOutput {
	return o
}

func (o ArchiveResourceOutput) Value() khulnasoft.ArchiveOutput {
	return o.ApplyT(func(v *ArchiveResource) khulnasoft.ArchiveOutput { return v.Value }).(khulnasoft.ArchiveOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*ArchiveResourceInput)(nil)).Elem(), &ArchiveResource{})
	khulnasoft.RegisterOutputType(ArchiveResourceOutput{})
}
