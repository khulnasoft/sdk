// Code generated by khulnasoft-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package subpackage

import (
	"context"
	"reflect"

	"example.com/khulnasoft-subpackage/sdk/go/v2/subpackage/internal"
	"github.com/khulnasoft/sdk/go/khulnasoft"
)

type HelloWorld struct {
	khulnasoft.CustomResourceState

	ParameterValue khulnasoft.StringOutput `khulnasoft:"parameterValue"`
}

// NewHelloWorld registers a new resource with the given unique name, arguments, and options.
func NewHelloWorld(ctx *khulnasoft.Context,
	name string, args *HelloWorldArgs, opts ...khulnasoft.ResourceOption) (*HelloWorld, error) {
	if args == nil {
		args = &HelloWorldArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource HelloWorld
	err = ctx.RegisterPackageResource("subpackage:index:HelloWorld", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelloWorld gets an existing HelloWorld resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelloWorld(ctx *khulnasoft.Context,
	name string, id khulnasoft.IDInput, state *HelloWorldState, opts ...khulnasoft.ResourceOption) (*HelloWorld, error) {
	var resource HelloWorld
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("subpackage:index:HelloWorld", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelloWorld resources.
type helloWorldState struct {
}

type HelloWorldState struct {
}

func (HelloWorldState) ElementType() reflect.Type {
	return reflect.TypeOf((*helloWorldState)(nil)).Elem()
}

type helloWorldArgs struct {
}

// The set of arguments for constructing a HelloWorld resource.
type HelloWorldArgs struct {
}

func (HelloWorldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helloWorldArgs)(nil)).Elem()
}

type HelloWorldInput interface {
	khulnasoft.Input

	ToHelloWorldOutput() HelloWorldOutput
	ToHelloWorldOutputWithContext(ctx context.Context) HelloWorldOutput
}

func (*HelloWorld) ElementType() reflect.Type {
	return reflect.TypeOf((**HelloWorld)(nil)).Elem()
}

func (i *HelloWorld) ToHelloWorldOutput() HelloWorldOutput {
	return i.ToHelloWorldOutputWithContext(context.Background())
}

func (i *HelloWorld) ToHelloWorldOutputWithContext(ctx context.Context) HelloWorldOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(HelloWorldOutput)
}

type HelloWorldOutput struct{ *khulnasoft.OutputState }

func (HelloWorldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelloWorld)(nil)).Elem()
}

func (o HelloWorldOutput) ToHelloWorldOutput() HelloWorldOutput {
	return o
}

func (o HelloWorldOutput) ToHelloWorldOutputWithContext(ctx context.Context) HelloWorldOutput {
	return o
}

func (o HelloWorldOutput) ParameterValue() khulnasoft.StringOutput {
	return o.ApplyT(func(v *HelloWorld) khulnasoft.StringOutput { return v.ParameterValue }).(khulnasoft.StringOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*HelloWorldInput)(nil)).Elem(), &HelloWorld{})
	khulnasoft.RegisterOutputType(HelloWorldOutput{})
}
