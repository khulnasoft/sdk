// Code generated by khulnasoft-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package refref

import (
	"context"
	"reflect"

	"example.com/khulnasoft-ref-ref/sdk/go/v12/refref/internal"
	"github.com/khulnasoft/sdk/go/khulnasoft"
)

var _ = internal.GetEnvOrDefault

type Data struct {
	BoolArray []bool            `khulnasoft:"boolArray"`
	Boolean   bool              `khulnasoft:"boolean"`
	Float     float64           `khulnasoft:"float"`
	InnerData InnerData         `khulnasoft:"innerData"`
	Integer   int               `khulnasoft:"integer"`
	String    string            `khulnasoft:"string"`
	StringMap map[string]string `khulnasoft:"stringMap"`
}

// DataInput is an input type that accepts DataArgs and DataOutput values.
// You can construct a concrete instance of `DataInput` via:
//
//	DataArgs{...}
type DataInput interface {
	khulnasoft.Input

	ToDataOutput() DataOutput
	ToDataOutputWithContext(context.Context) DataOutput
}

type DataArgs struct {
	BoolArray khulnasoft.BoolArrayInput `khulnasoft:"boolArray"`
	Boolean   khulnasoft.BoolInput      `khulnasoft:"boolean"`
	Float     khulnasoft.Float64Input   `khulnasoft:"float"`
	InnerData InnerDataInput        `khulnasoft:"innerData"`
	Integer   khulnasoft.IntInput       `khulnasoft:"integer"`
	String    khulnasoft.StringInput    `khulnasoft:"string"`
	StringMap khulnasoft.StringMapInput `khulnasoft:"stringMap"`
}

func (DataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Data)(nil)).Elem()
}

func (i DataArgs) ToDataOutput() DataOutput {
	return i.ToDataOutputWithContext(context.Background())
}

func (i DataArgs) ToDataOutputWithContext(ctx context.Context) DataOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(DataOutput)
}

type DataOutput struct{ *khulnasoft.OutputState }

func (DataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Data)(nil)).Elem()
}

func (o DataOutput) ToDataOutput() DataOutput {
	return o
}

func (o DataOutput) ToDataOutputWithContext(ctx context.Context) DataOutput {
	return o
}

func (o DataOutput) BoolArray() khulnasoft.BoolArrayOutput {
	return o.ApplyT(func(v Data) []bool { return v.BoolArray }).(khulnasoft.BoolArrayOutput)
}

func (o DataOutput) Boolean() khulnasoft.BoolOutput {
	return o.ApplyT(func(v Data) bool { return v.Boolean }).(khulnasoft.BoolOutput)
}

func (o DataOutput) Float() khulnasoft.Float64Output {
	return o.ApplyT(func(v Data) float64 { return v.Float }).(khulnasoft.Float64Output)
}

func (o DataOutput) InnerData() InnerDataOutput {
	return o.ApplyT(func(v Data) InnerData { return v.InnerData }).(InnerDataOutput)
}

func (o DataOutput) Integer() khulnasoft.IntOutput {
	return o.ApplyT(func(v Data) int { return v.Integer }).(khulnasoft.IntOutput)
}

func (o DataOutput) String() khulnasoft.StringOutput {
	return o.ApplyT(func(v Data) string { return v.String }).(khulnasoft.StringOutput)
}

func (o DataOutput) StringMap() khulnasoft.StringMapOutput {
	return o.ApplyT(func(v Data) map[string]string { return v.StringMap }).(khulnasoft.StringMapOutput)
}

type InnerData struct {
	BoolArray []bool            `khulnasoft:"boolArray"`
	Boolean   bool              `khulnasoft:"boolean"`
	Float     float64           `khulnasoft:"float"`
	Integer   int               `khulnasoft:"integer"`
	String    string            `khulnasoft:"string"`
	StringMap map[string]string `khulnasoft:"stringMap"`
}

// InnerDataInput is an input type that accepts InnerDataArgs and InnerDataOutput values.
// You can construct a concrete instance of `InnerDataInput` via:
//
//	InnerDataArgs{...}
type InnerDataInput interface {
	khulnasoft.Input

	ToInnerDataOutput() InnerDataOutput
	ToInnerDataOutputWithContext(context.Context) InnerDataOutput
}

type InnerDataArgs struct {
	BoolArray khulnasoft.BoolArrayInput `khulnasoft:"boolArray"`
	Boolean   khulnasoft.BoolInput      `khulnasoft:"boolean"`
	Float     khulnasoft.Float64Input   `khulnasoft:"float"`
	Integer   khulnasoft.IntInput       `khulnasoft:"integer"`
	String    khulnasoft.StringInput    `khulnasoft:"string"`
	StringMap khulnasoft.StringMapInput `khulnasoft:"stringMap"`
}

func (InnerDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InnerData)(nil)).Elem()
}

func (i InnerDataArgs) ToInnerDataOutput() InnerDataOutput {
	return i.ToInnerDataOutputWithContext(context.Background())
}

func (i InnerDataArgs) ToInnerDataOutputWithContext(ctx context.Context) InnerDataOutput {
	return khulnasoft.ToOutputWithContext(ctx, i).(InnerDataOutput)
}

type InnerDataOutput struct{ *khulnasoft.OutputState }

func (InnerDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InnerData)(nil)).Elem()
}

func (o InnerDataOutput) ToInnerDataOutput() InnerDataOutput {
	return o
}

func (o InnerDataOutput) ToInnerDataOutputWithContext(ctx context.Context) InnerDataOutput {
	return o
}

func (o InnerDataOutput) BoolArray() khulnasoft.BoolArrayOutput {
	return o.ApplyT(func(v InnerData) []bool { return v.BoolArray }).(khulnasoft.BoolArrayOutput)
}

func (o InnerDataOutput) Boolean() khulnasoft.BoolOutput {
	return o.ApplyT(func(v InnerData) bool { return v.Boolean }).(khulnasoft.BoolOutput)
}

func (o InnerDataOutput) Float() khulnasoft.Float64Output {
	return o.ApplyT(func(v InnerData) float64 { return v.Float }).(khulnasoft.Float64Output)
}

func (o InnerDataOutput) Integer() khulnasoft.IntOutput {
	return o.ApplyT(func(v InnerData) int { return v.Integer }).(khulnasoft.IntOutput)
}

func (o InnerDataOutput) String() khulnasoft.StringOutput {
	return o.ApplyT(func(v InnerData) string { return v.String }).(khulnasoft.StringOutput)
}

func (o InnerDataOutput) StringMap() khulnasoft.StringMapOutput {
	return o.ApplyT(func(v InnerData) map[string]string { return v.StringMap }).(khulnasoft.StringMapOutput)
}

func init() {
	khulnasoft.RegisterInputType(reflect.TypeOf((*DataInput)(nil)).Elem(), DataArgs{})
	khulnasoft.RegisterInputType(reflect.TypeOf((*InnerDataInput)(nil)).Elem(), InnerDataArgs{})
	khulnasoft.RegisterOutputType(DataOutput{})
	khulnasoft.RegisterOutputType(InnerDataOutput{})
}
